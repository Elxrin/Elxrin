import * as rehype_pretty_code from 'rehype-pretty-code';
import * as _mdx_js_mdx_lib_core from '@mdx-js/mdx/lib/core';
import { L as LoaderOptions } from './types-6ff517b4.js';
import { RemarkLinkRewriteOptions } from './mdx-plugins/remark-link-rewrite.js';
import 'next';
import 'mdast';
import '@mdx-js/mdx';
import 'gray-matter';
import 'webpack';
import 'react';
import 'unified';

declare const buildDynamicMDX: (content: string, { remarkLinkRewriteOptions, ...loaderOptions }?: Pick<LoaderOptions, "staticImage" | "flexsearch" | "defaultShowCopyCode" | "readingTime" | "latex" | "codeHighlight"> & {
    mdxOptions?: (Pick<_mdx_js_mdx_lib_core.ProcessorOptions, "rehypePlugins" | "remarkPlugins"> & {
        format?: "mdx" | "md" | "detect" | undefined;
        rehypePrettyCodeOptions?: Partial<rehype_pretty_code.Options> | undefined;
    } & Pick<_mdx_js_mdx_lib_core.ProcessorOptions, "outputFormat" | "jsx">) | undefined;
    route?: string | undefined;
    locale?: string | undefined;
} & {
    remarkLinkRewriteOptions?: RemarkLinkRewriteOptions | undefined;
}) => Promise<{
    __nextra_dynamic_mdx: string;
    __nextra_dynamic_opts: string;
}>;
declare const buildDynamicMeta: () => Promise<{
    __nextra_pageMap: any;
} | {
    __nextra_pageMap?: undefined;
}>;

export { buildDynamicMDX, buildDynamicMeta };
